{"version":3,"sources":["coronavirus.png","components/CaseStatus.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CaseStatus","details","formatNumber","className","lastUpdate","confirmed","value","recovered","deaths","Home","state","world","userCountry","userCountryCode","userCountryName","num","toLocaleString","navigator","language","minimumFractionDigits","axios","get","then","res","setState","data","country","country_name","this","worldSummary","Object","entries","length","userCountrySummary","Component","App","to","src","logo","href","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,yC,6NC4B5BC,EA1BI,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aAC5B,OACE,6BACE,uBAAGC,UAAU,oBAAb,SAAsC,2BAAIF,EAAQG,aAClD,yBAAKD,UAAU,cACb,yBAAKA,UAAU,8BACb,2BAAG,+CACH,wBAAIA,UAAU,cAAcD,EAAaD,EAAQI,UAAUC,UAG/D,yBAAKH,UAAU,cACb,yBAAKA,UAAU,6BACb,2BAAG,yCACH,wBAAIA,UAAU,cAAcD,EAAaD,EAAQM,UAAUD,UAG/D,yBAAKH,UAAU,cACb,yBAAKA,UAAU,2BACb,2BAAG,sCACH,wBAAIA,UAAU,cAAcD,EAAaD,EAAQO,OAAOF,YCwDnDG,E,4MAxEbC,MAAQ,CACNC,MAAO,GACPC,YAAa,GACbC,gBAAiB,GACjBC,gBAAiB,I,EA4BnBZ,aAAe,SAACa,GAEd,MAAmB,qBAARA,EACFA,EAAIC,eAAeC,UAAUC,SAAU,CAAEC,sBAAuB,IAGlE,G,uMA7BDC,IAAMC,IAAI,yBACbC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZX,gBAAiBU,EAAIE,KAAKC,QAC1BZ,gBAAiBS,EAAIE,KAAKE,kB,OAIhCP,IAAMC,IAAI,kCACPC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZb,MAAOY,EAAIE,UAIjBL,IAAMC,IAAI,4CAA8CO,KAAKlB,MAAMG,iBAChES,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZZ,YAAaW,EAAIE,U,qIAcf,IACAd,EAAUiB,KAAKlB,MAAfC,MACAC,EAAgBgB,KAAKlB,MAArBE,YAEFiB,EAAeC,OAAOC,QAAQpB,GAAOqB,OACzC,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,kCAAd,UACA,kBAAC,EAAD,CAAYF,QAASU,EAAOT,aAAc0B,KAAK1B,gBAGjD,yBAAKC,UAAU,UAAf,cAGI8B,EAAqBH,OAAOC,QAAQnB,GAAaoB,OACrD,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,kCAAmCyB,KAAKlB,MAAMI,iBAC5D,kBAAC,EAAD,CAAYb,QAASW,EAAaV,aAAc0B,KAAK1B,gBAGvD,yBAAKC,UAAU,UAAf,cAGF,OACE,yBAAKA,UAAU,WACZ0B,EACAI,O,GAnEUC,a,iBC0BJC,E,uKAvBX,OACE,kBAAC,IAAD,KACE,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAMiC,GAAG,KACP,yBAAKC,IAAKC,IAAMnC,UAAU,SAC1B,wBAAIA,UAAU,2BAAd,8BAEF,uBAAGA,UAAU,oBAAb,UAAuC,uBAAGoC,KAAK,qCAAR,qBAAvC,SACA,uBAAGA,KAAK,qCAAR,eADA,oBAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,qBAAqBC,UAAWjC,Y,GAf9CyB,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aba90323.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.29f7b0b2.png\";","import React from 'react';\r\n\r\nconst CaseStatus = ({details, formatNumber}) => {\r\n  return (\r\n    <div>\r\n      <p className=\"center grey-text\">As of <b>{details.lastUpdate}</b></p>\r\n      <div className=\"col s12 m4\">\r\n        <div className=\"card-panel yellow darken-3\">\r\n          <p><b>CONFIRMED CASES</b></p>\r\n          <h4 className=\"white-text\">{formatNumber(details.confirmed.value)}</h4>\r\n        </div>\r\n      </div>\r\n      <div className=\"col s12 m4\">\r\n        <div className=\"card-panel green darken-3\">\r\n          <p><b>RECOVERED</b></p>\r\n          <h4 className=\"white-text\">{formatNumber(details.recovered.value)}</h4>\r\n        </div>\r\n      </div>\r\n      <div className=\"col s12 m4\">\r\n        <div className=\"card-panel red darken-3\">\r\n          <p><b>DEATHS</b></p>\r\n          <h4 className=\"white-text\">{formatNumber(details.deaths.value)}</h4>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CaseStatus","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport CaseStatus from './CaseStatus';\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    world: {}, \r\n    userCountry: {},\r\n    userCountryCode: '',\r\n    userCountryName: ''\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    await axios.get('https://ipapi.co/json')\r\n      .then(res => {\r\n        this.setState({\r\n          userCountryCode: res.data.country, \r\n          userCountryName: res.data.country_name\r\n        })\r\n      });\r\n\r\n    axios.get('https://covid19.mathdro.id/api')\r\n      .then(res => {\r\n        this.setState({\r\n          world: res.data\r\n        })\r\n      });\r\n\r\n    axios.get('https://covid19.mathdro.id/api/countries/' + this.state.userCountryCode)\r\n      .then(res => {\r\n        this.setState({\r\n          userCountry: res.data\r\n        })\r\n      });\r\n  }\r\n\r\n  formatNumber = (num) => {\r\n\r\n    if (typeof num !== \"undefined\") {\r\n      return num.toLocaleString(navigator.language, { minimumFractionDigits: 0 });\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n  \r\n  render() {\r\n    const { world } = this.state;\r\n    const { userCountry } = this.state;\r\n\r\n    const worldSummary = Object.entries(world).length ? (\r\n      <div className=\"row\">\r\n        <h4 className=\"center grey-text text-darken-2\">Global</h4>\r\n        <CaseStatus details={world} formatNumber={this.formatNumber} />\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading...</div>\r\n    )\r\n\r\n    const userCountrySummary = Object.entries(userCountry).length ? (\r\n      <div className=\"row\">\r\n        <h5 className=\"center grey-text text-darken-2\">{ this.state.userCountryName }</h5>\r\n        <CaseStatus details={userCountry} formatNumber={this.formatNumber} />\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading...</div>\r\n    )\r\n    \r\n    return (\r\n      <div className=\"summary\">\r\n        {worldSummary}\r\n        {userCountrySummary}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\r\nimport Home from './components/Home.js';\r\nimport logo from './coronavirus.png';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <div className=\"home-page container\">\r\n            <div className=\"center\">\r\n              <Link to='/'>\r\n                <img src={logo} className=\"logo\"/>\r\n                <h3 className=\"grey-text text-darken-2\">COVID-19 Pandemic Tracker</h3>\r\n              </Link>\r\n              <p className=\"center grey-text\">Made by<a href='http://github.com/kennethesguerra'> @kennethesguerra</a> using \r\n              <a href=\"http://github.com/kennethesguerra\"> @mathdroid</a>'s Covid-19 API</p>\r\n            </div>\r\n            <Switch>\r\n              <Route exact path='/covid-19-tracker/' component={Home}></Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["utils/index.js","components/charts/SummaryChart.js","components/CaseStatus.js","components/Preloader.js","components/Home.js","components/Worldwide.js","components/charts/DailyLineChart.js","components/GlobalDailyStatus.js","App.js","serviceWorker.js","index.js"],"names":["formatNumber","num","toLocaleString","navigator","language","minimumFractionDigits","SummaryChart","recovered","deaths","data","datasets","active","backgroundColor","labels","options","responsive","CaseStatus","details","lastUpdate","confirmed","value","active_percentage","recovered_percentage","death_percentage","className","dateString","dt","Date","getMonth","toString","padStart","getDate","getFullYear","getHours","getMinutes","getSeconds","formatDate","class","toFixed","Preloader","Home","state","world","userCountry","userCountryCode","userCountryName","axios","get","then","res","setState","country","country_name","this","worldSummary","Object","entries","length","to","type","name","userCountrySummary","Component","Worldwide","countries","map","a","iso3","country_deets","catch","error","console","log","countriesList","colspan","DailyLineChart","dailyCases","dailyCase","push","txtDate","totalConfirmed","totalDeaths","totalRecovered","label","borderColor","GlobalDailyStatus","currDate","setDate","arrDate","i","forEach","parseInt","dailyCasesData","App","href","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0a191b1d.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nexport const formatNumber = (num) => {\r\n  if (typeof num !== \"undefined\") {\r\n    return num.toLocaleString(navigator.language, { minimumFractionDigits: 0 });\r\n  }\r\n  return 0;\r\n}\r\n\r\n\r\nexport const formatDate = (dateString) => {\r\n  const dt = new Date(dateString);\r\n  return `${(dt.getMonth() + 1).toString().padStart(2, '0')}/${dt\r\n    .getDate()\r\n    .toString()\r\n    .padStart(2, '0')}/${dt\r\n    .getFullYear()\r\n    .toString()\r\n    .padStart(4, '0')} ${dt\r\n    .getHours()\r\n    .toString()\r\n    .padStart(2, '0')}:${dt\r\n    .getMinutes()\r\n    .toString()\r\n    .padStart(2, '0')}:${dt\r\n    .getSeconds()\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n};","/**\r\n * Summary Component\r\n * \r\n * This component displays a Pie Chart to demonstrate the \r\n * status of the outbreak globally or regionally\r\n * \r\n * @author Mark Kenneth Esguerra <esguerrakenneth@gmail.com>\r\n */\r\nimport React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst SummaryChart = ({recovered, deaths, active}) => {\r\n\r\n  const data = {\r\n      datasets: [{\r\n          data: [active, recovered, deaths],\r\n          backgroundColor: [\r\n            'rgb(251,192,45)',\r\n            'rgba(6, 151, 79, 0.8)', \r\n            'rgba(220, 19, 19, 0.9)'\r\n          ]\r\n      }],\r\n      labels: [\r\n          'Active',\r\n          'Recovered',\r\n          'Deaths'\r\n      ], \r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <Pie data={data} options={{\r\n            responsive: true \r\n         }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SummaryChart;\r\n","import React from 'react';\r\nimport { formatDate, formatNumber } from '../utils/'; \r\nimport SummaryChart from './charts/SummaryChart';\r\n\r\nconst CaseStatus = ({details}) => {\r\n  let lastUpdate = details.lastUpdate;\r\n  let confirmed = details.confirmed.value;\r\n  let recovered = details.recovered.value;\r\n  let deaths = details.deaths.value;\r\n\r\n  let active = confirmed - (recovered + deaths)\r\n\r\n  let active_percentage = active / confirmed * 100;\r\n  let recovered_percentage = (recovered / confirmed) * 100;\r\n  let death_percentage = (deaths / confirmed) * 100;\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"center grey-text\">Last updated at <b>{formatDate(lastUpdate)}</b></p>\r\n      <div className=\"col s12 m5\">\r\n        <ul class=\"collection white-text darken-2\">\r\n          <li class=\"collection-item yellow darken-2\">\r\n            <h6><b>CONFIRMED CASES: </b>{formatNumber(confirmed)}</h6>\r\n          </li>\r\n          <li class=\"collection-item green darken-3\">\r\n            <h6><b>RECOVERED: </b>{formatNumber(recovered)} ({recovered_percentage.toFixed(2)}%)</h6>\r\n          </li>\r\n          <li class=\"collection-item red darken-3\">\r\n            <h6><b>DEATHS: </b>{formatNumber(deaths)} ({death_percentage.toFixed(2)}%)</h6>\r\n          </li>\r\n          <li class=\"collection-item grey darken-1\">\r\n            <h6><b>ACTIVE CASES: </b>{formatNumber(active)} ({active_percentage.toFixed(2)}%)</h6>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"col s12 m7\">\r\n        <SummaryChart active={active} recovered={recovered} deaths={deaths}  />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CaseStatus","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <div className=\"center\">\r\n      <div className=\"preloader-wrapper big active\">\r\n        <div className=\"spinner-layer spinner-blue\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader","/**\r\n * Home Component\r\n * \r\n * This component serves as the home page of the site. The homepage \r\n * displays the Global status and the status of the country where\r\n * viewer is located using IP Address Lookup\r\n * \r\n * @author Mark Kenneth Esguerra <esguerrakenneth@gmail.com>\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport CaseStatus from './CaseStatus';\r\nimport { Link } from 'react-router-dom';\r\nimport Preloader from './Preloader';\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    world: {}, \r\n    userCountry: {},\r\n    userCountryCode: '',\r\n    userCountryName: ''\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    await axios.get('https://ipapi.co/json')\r\n      .then(res => {\r\n        this.setState({\r\n          userCountryCode: res.data.country, \r\n          userCountryName: res.data.country_name\r\n        })\r\n      });\r\n\r\n    axios.get('https://covid19.mathdro.id/api')\r\n      .then(res => {\r\n        this.setState({\r\n          world: res.data\r\n        })\r\n      });\r\n\r\n    axios.get('https://covid19.mathdro.id/api/countries/' + this.state.userCountryCode)\r\n      .then(res => {\r\n        this.setState({\r\n          userCountry: res.data\r\n        })\r\n      });\r\n  }\r\n  \r\n  render() {\r\n    const { world } = this.state;\r\n    const { userCountry } = this.state;\r\n    \r\n    const worldSummary = Object.entries(world).length ? (\r\n      <div className=\"row\">\r\n        <h4 className=\"center grey-text text-darken-2\">Global</h4>\r\n        <CaseStatus details={world} />\r\n        <div class=\"row right\">\r\n          <Link to='/covid-19-stat/daily' >\r\n            <button className=\"left btn waves-effect waves-light\" type=\"button\" name=\"action\">\r\n              See Global Daily Report\r\n            </button>\r\n          </Link> <br /><br />\r\n          <Link to='/covid-19-stat/worldwide' >\r\n            <button className=\"btn waves-effect waves-light\" type=\"button\" name=\"action\">\r\n              See cases by countries\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <Preloader />\r\n    )\r\n\r\n    const userCountrySummary = Object.entries(userCountry).length ? (\r\n      <div className=\"row\">\r\n        <h5 className=\"center grey-text text-darken-2\">{ this.state.userCountryName }</h5>\r\n        <p className=\"grey-text text-darken-2 center\">(Viewer's country)</p>\r\n        <CaseStatus details={userCountry} />\r\n      </div>\r\n    ) : (\r\n      <Preloader />\r\n    )\r\n    \r\n    return (\r\n      <div className=\"summary\">\r\n        {worldSummary}\r\n        <hr />\r\n        {userCountrySummary}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home","/**\r\n * Worldwide Component\r\n * \r\n * This component serves all countries status of the outbreak\r\n * \r\n * @author Mark Kenneth Esguerra <esguerrakenneth@gmail.com>\r\n */\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { formatNumber } from '../utils/';\r\nimport Preloader from './Preloader';\r\n\r\nclass Worldwide extends Component {\r\n  state = {\r\n    countries: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await axios.get('https://covid19.mathdro.id/api/countries')\r\n      .then( res => {\r\n        res.data.countries.map(async (country) => {\r\n          await axios.get('https://covid19.mathdro.id/api/countries/' + country.iso3)\r\n            .then(details => {\r\n              let country_deets = {\r\n                name: country.name,\r\n                confirmed: details.data.confirmed,\r\n                recovered: details.data.recovered,\r\n                deaths: details.data.deaths,\r\n                lastUpdate: details.data.lastUpdate\r\n              }\r\n              this.setState({\r\n                countries: [...this.state.countries, country_deets]\r\n              })\r\n            })\r\n            .catch (error => {\r\n              console.log(error);\r\n            })\r\n        })\r\n      });\r\n  }\r\n  render() {\r\n    const countries = this.state.countries;\r\n    const countriesList = countries.length ? (\r\n      countries.map((country) => {\r\n        return (\r\n          <tr>\r\n            <td>{country.name}</td>\r\n            <td className=\"center\">{formatNumber(country.confirmed.value)}</td>\r\n            <td className=\"center\">{formatNumber(country.recovered.value)}</td>\r\n            <td className=\"center\">{formatNumber(country.deaths.value)}</td>\r\n            <td className=\"center\">{formatNumber(country.confirmed.value - (country.recovered.value + country.deaths.value))}</td>\r\n          </tr>\r\n        )\r\n      })\r\n    ) : (\r\n      <td colspan=\"5\">\r\n        <Preloader />\r\n      </td>\r\n    )\r\n    \r\n    return (\r\n      <div>\r\n        <h5>Cases per Country/Territory </h5>\r\n        <hr/>\r\n        <table className=\"highlight striped responsive-table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"center\">Country</th>\r\n              <th className=\"center\">Confirmed</th>\r\n              <th className=\"center\">Recovered</th>\r\n              <th className=\"center\">Deaths</th>\r\n              <th className=\"center\">Active Cases</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {countriesList}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Worldwide","\r\nimport React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst DailyLineChart = ({dailyCases}) => {\r\n\r\n  const labels = [];\r\n  const confirmed = [];\r\n  const deaths = [];\r\n  const recovered = [];\r\n\r\n  dailyCases.map((dailyCase) => {\r\n    labels.push(dailyCase.txtDate);\r\n    confirmed.push(dailyCase.totalConfirmed);\r\n    deaths.push(dailyCase.totalDeaths);\r\n    recovered.push(dailyCase.totalRecovered);\r\n  });\r\n  console.log(confirmed);\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Confirmed', \r\n        borderColor: \"yellow\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.0)\", \r\n        data: confirmed\r\n      },\r\n      {\r\n        label: 'Recovered', \r\n        borderColor: \"green\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.0)\", \r\n        data: recovered\r\n      },\r\n      {\r\n        label: 'Deaths', \r\n        borderColor: \"red\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.0)\", \r\n        data: deaths\r\n      }\r\n    ],\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Line data={data} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyLineChart\r\n","import React, { Component } from 'react';\r\nimport DailyLineChart from './charts/DailyLineChart';\r\nimport axios from 'axios';\r\nimport Preloader from './Preloader';\r\n\r\nclass GlobalDailyStatus extends Component {\r\n\r\n  state = {\r\n    dailyCases: []\r\n  }\r\n  async componentDidMount() {\r\n    let currDate = new Date();\r\n    currDate.setDate(currDate.getDate() - 48);\r\n    let arrDate = []\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n      currDate.setDate(currDate.getDate() + 2);\r\n\r\n      let txtDate = (currDate.getMonth() + 1 ) + '-' + currDate.getDate() + '-' + currDate.getFullYear();\r\n      console.log(currDate, txtDate);\r\n      arrDate.push(txtDate);\r\n\r\n      await axios.get('https://covid19.mathdro.id/api/daily/' + txtDate)\r\n        .then(res => {\r\n          let totalConfirmed = 0;\r\n          let totalRecovered = 0;\r\n          let totalDeaths = 0;\r\n          res.data.forEach((data) => {\r\n            totalConfirmed += parseInt(data.confirmed);\r\n            totalRecovered += parseInt(data.recovered);\r\n            totalDeaths += parseInt(data.deaths);\r\n          })\r\n          this.setState({\r\n            dailyCases: [...this.state.dailyCases, {txtDate, totalConfirmed, totalDeaths, totalRecovered}]\r\n          });\r\n        })\r\n    }\r\n    console.log(arrDate);\r\n  }\r\n\r\n  render() {\r\n    const {dailyCases} = this.state;\r\n    console.log(dailyCases);\r\n    const dailyCasesData = dailyCases.length ? (\r\n      <DailyLineChart dailyCases={dailyCases} />\r\n    ) : (\r\n      <Preloader />\r\n    )\r\n    return (\r\n      <div>\r\n        <h5>Global Daily Reports</h5>\r\n        <hr />\r\n        {dailyCasesData}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GlobalDailyStatus\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport Worldwide from './components/Worldwide';\r\nimport GlobalDailyStatus from './components/GlobalDailyStatus';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <div className=\"row blue darken-4 header\">\r\n            <div className=\"col s12 m9\">\r\n            <Link to='/covid-19-stat/'><h5>COVID-19 Pandemic Status</h5></Link>\r\n            </div>\r\n            <div className=\"col s12 m3\">\r\n              <a href=\"https://github.com/kennethesguerra/covid-19-stat\"><i className=\"fab fa-github fa-3x right\"></i></a>\r\n            </div>\r\n          </div>\r\n          <div className=\"home-page container\">\r\n            <Switch>\r\n              <Route exact path='/covid-19-stat/' component={Home}></Route>\r\n              <Route exact path='/covid-19-stat/worldwide' component={Worldwide}></Route>\r\n              <Route exact path='/covid-19-stat/daily' component={GlobalDailyStatus}></Route>\r\n            </Switch>\r\n          </div>\r\n          <p className=\"center grey-text\">Visualization by<a href='http://github.com/kennethesguerra'> @kennethesguerra</a><br />\r\n          Data access from John Hopkins University CSSE via <a href=\"http://github.com/mathdroid\"> @mathdroid</a>'s Covid-19 API</p>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}